package org.allenai.pipeline.spark

import org.allenai.pipeline._
import org.allenai.pipeline.s3.CreateCoreArtifacts

import com.amazonaws.auth.BasicAWSCredentials
import com.typesafe.config.Config
import org.apache.spark.SparkContext
import org.apache.spark.rdd.RDD

import scala.reflect.ClassTag

import java.net.URI

/** Created by rodneykinney on 5/24/15.
  */
trait SparkPipeline extends Pipeline {
  this: Pipeline =>

  def sparkContext: SparkContext

  def persistRdd[T: ClassTag: StringSerializable](
    original: Producer[RDD[T]],
    suffix: String = ""
  ) = {
    val io = new PartitionedRddIo[T](sparkContext)
    val path = s"data/${autoGeneratedPath(original, io)}$suffix"
    val url = outputUrl(path)
    persist[RDD[T], PartitionedRddArtifact[FlatArtifact]](original, io, url)
  }

  override def urlToArtifact = UrlToArtifact.chain(super.urlToArtifact, CreateRddArtifacts.fromFileUrls)
}

trait S3UrlHandlers extends Pipeline {
  def credentials: BasicAWSCredentials
  override def urlToArtifact = UrlToArtifact.chain(super.urlToArtifact, CreateRddArtifacts.fromS3Urls(credentials))
}

trait ConfiguredSparkPipeline extends SparkPipeline {
  this: ConfiguredPipeline =>

  def optionallyPersistRdd[T: ClassTag: StringSerializable](
    original: Producer[RDD[T]],
    stepName: String,
    suffix: String = ""
  ) = {
    val io = new PartitionedRddIo[T](sparkContext)
    optionallyPersist(original, stepName, io, suffix)
  }
}

